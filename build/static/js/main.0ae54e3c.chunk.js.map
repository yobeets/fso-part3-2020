{"version":3,"sources":["components/Search.js","components/PersonForm.js","components/Numbers.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Search","showPeople","handleFilter","value","onChange","PersonForm","newName","newNumber","addPerson","handleNewPerson","handleNewNumber","onSubmit","type","Numbers","peopleToShow","removePerson","map","person","key","id","name","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","delete","put","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setShowPeople","notifMessage","setNotifMessage","useEffect","personService","initialPeople","console","log","length","handleNotify","setTimeout","filter","toLowerCase","includes","event","target","preventDefault","personObject","find","e","window","confirm","toUpdate","p","changedPerson","returnedPerson","catch","error","n","concat","toDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ae54e3c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Search = ({ showPeople, handleFilter }) => {\n    // const handleFilter = (event) => {\n    //     setShowPeople(event.target.value)\n    // }\n    return (\n        <div>\n            Filter: <input\n                value={showPeople} \n                onChange={handleFilter}\n            />\n        </div>\n    )\n}\nexport default Search\n            ","import React from 'react'\n\nconst PersonForm = ({ newName, newNumber, addPerson, handleNewPerson, handleNewNumber }) => {\n    // const addPerson = (event) => {\n    //     event.preventDefault()\n    //     const personObject = {\n    //         name:newName,\n    //         number:newNumber\n    //     }\n    //     if (persons.filter(e => e.name === personObject.name).length > 0) {\n    //         console.log(\"already in phonebook\")\n    //         window.alert(`${personObject.name} already in phonebook`);\n    //     } else {\n    //         setPersons(persons.concat(personObject))\n    //     }\n    //     setNewName('')\n    //     setNewNumber('')\n    // }\n    // const handleNewPerson = (event) => {\n    //     // console.log(event.target.value)\n    //     setNewName(event.target.value)\n    // }\n    // const handleNewNumber = (event) => {\n    //     // console.log(event.target.value)\n    //     setNewNumber(event.target.value)\n    // }\n    return (\n        <div>\n            <h2>Add New</h2>\n            <form onSubmit={addPerson}>\n                <div>\n                    name: <input\n                        value={newName} \n                        onChange={handleNewPerson}\n                    />\n                </div>\n                <div>\n                    number: <input \n                        value={newNumber} \n                        onChange={handleNewNumber}\n                    />\n                \n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </div>\n        \n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Numbers = ({ peopleToShow, removePerson }) => {\n    // const peopleToShow = !showPeople\n    //     ? persons\n    //     : persons.filter(person => person.name.toLowerCase().includes(showPeople.toLowerCase()))\n    return (\n        <div>\n            <h2>Numbers</h2>\n            <div>\n                {peopleToShow.map( (person) => \n                    <p key={person.id}>{person.name} : {person.number} <button onClick={() => removePerson(person.id)}>delete</button></p>\n                )}\n            </div>\n        </div>        \n    )\n}\nexport default Numbers","import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/persons' - original, changed during part 3\n//const baseUrl = 'http://localhost:3001/api/persons'\nconst baseUrl = 'api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { \n    getAll, \n    create, \n    remove,\n    update\n}","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={message.type}>\n            {message.message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Search from './components/Search'\nimport PersonForm from './components/PersonForm'\nimport Numbers from './components/Numbers'\n//import axios from 'axios'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n    const [ persons, setPersons ] = useState([])\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ showPeople, setShowPeople ] = useState('') \n    const [ notifMessage, setNotifMessage ] = useState(null)\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(initialPeople => {\n                setPersons(initialPeople)\n            })\n    }, [])\n    console.log('render', persons.length, 'people')\n\n    const handleNotify = (message, type) => {\n        setNotifMessage({ message, type })\n        setTimeout(() => {\n            setNotifMessage(null)\n        }, 5000)\n    }\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const personObject = {\n            name:newName,\n            number:newNumber\n        }\n        if (persons.find(e => e.name === personObject.name)) {\n            //console.log(\"already in phonebook\")\n            const mostDef = window.confirm(`${personObject.name} is already in the phonebook, would you like to update their number?`)\n            if (mostDef) {\n                const toUpdate = persons.find(p => p.name === personObject.name)\n                const changedPerson = { ...toUpdate, number: personObject.number }\n                //console.log('Do it! Update ' + toUpdate.name)\n                personService\n                    .update(toUpdate.id, changedPerson)\n                        .then(returnedPerson => {\n                            setPersons(persons.map(person => person.id !== toUpdate.id ? person : returnedPerson))\n                            handleNotify(`'${returnedPerson.name}' was updated`, 'success')\n                        })\n                        .catch(error => {\n                            handleNotify(`'${changedPerson.name}' has already been removed`, 'error')\n                            setPersons(persons.filter(n => n.id !== toUpdate.id))\n                        })\n            }\n        } else {\n            personService\n                .create(personObject)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                    handleNotify(`'${returnedPerson.name}' was added to the phonebook`, 'success')\n                })\n        }\n        setNewName('')\n        setNewNumber('')\n    }\n\n    const removePerson = id => {\n        const toDelete = persons.find(p => p.id === id)\n        const doIt = window.confirm(`Delete ${toDelete.name}`)\n        if (doIt) {\n            personService\n                .remove(id)\n                .then(response => {\n                    setPersons(persons.filter(person => person.id !== id))\n                    handleNotify(`'${toDelete.name}' was removed`, 'success')\n                })\n        }\n    }\n\n    const handleNewPerson = (event) => {\n        // console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n    const handleNewNumber = (event) => {\n        // console.log(event.target.value)\n        setNewNumber(event.target.value)\n    }\n\n    const handleFilter = (event) => {\n        setShowPeople(event.target.value)\n    }\n\n    const peopleToShow = !showPeople\n        ? persons\n        : persons.filter(person => person.name.toLowerCase().includes(showPeople.toLowerCase()))\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification\n                message={notifMessage}\n            />\n            <Search \n                showPeople={showPeople} \n                handleFilter={handleFilter} \n            />\n            <PersonForm \n                newName={newName}\n                newNumber={newNumber}\n                addPerson={addPerson}\n                handleNewPerson={handleNewPerson}\n                handleNewNumber={handleNewNumber}\n            />\n            <Numbers\n                peopleToShow={peopleToShow}\n                removePerson={removePerson}\n            />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\n// const people = [\n//   {\n//     id: 1,\n//     name: 'Arto Hellas',\n//     number: 123\n//   },\n//   {\n//     id: 2,\n//     name: 'Ada Lovelace',\n//     number: 789\n//   }\n// ]\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}